	/*
	tsc -init 
arquivo de configuração ts

shitf b arquivo , tsc build 

npm i jsonwebtoken -- instalação do token

--------
	*/


pastas:

Configs --
tmp --
middleware --
providers --


------------------------
configs: auth.js ]

exemplo de como executar um teste

-------------
testes:

instalação do jest:
npm i --save-dev jest
- npx jest --init

Rodar os testes: 
npm test

----

arquivo .ev:
npm install dotenv --save

-- pm2:
npx pm2 init

gerando um arquivo, modificamos ele assim: 
module.exports = { 
  apps: [{
    name: "app",
    script: "./app.js",
    instances: "max",
    env: {
      NODE_ENV: "development",
    },
    env_production: {
      NODE_ENV: "production",
    }
  }]
}


instalamos novamente o mp2
npm install pm2
verificamos se ele esta global no packge.json:

  "dependencies": {
    "bcryptjs": "^2.4.3",
    "body-parser": "^1.20.1",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "express-async-errors": "^3.1.1",
    "jsonwebtoken": "^9.0.0",
    "knex": "^2.3.0",
    "multer": "^1.4.5-lts.1",
    "pm2": "^5.2.2",
    "sequelize": "^6.28.0",
    "sqlite": "^4.1.2",
    "sqlite3": "^5.1.4"
  }
  -----
  modificamos nosso script de inicialização para: 
    "scripts": {
    "start": "pm2-runtime start ecosystem.config.js --env production",
    "dev": "nodemon ./src/server.js",
    "migrate": "npx knex migrate:latest",
    "test": "jest --watch"
  },

  adicionamos no arquivo ecosystem a nova configuração:
  module.exports = { 
  apps: [{
    name: "app",
    script: "./src/server.js",
    instances: "max",
    env: {
      NODE_ENV: "development",
    },
    env_production: {
      NODE_ENV: "production",
    }
  }]
}



rodamos o de produção com npm start